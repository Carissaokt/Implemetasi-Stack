#include <iostream>
#include <vector>
#include <sstream>
#include <cctype>
#include <string>

using namespace std;

bool isSymbol(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%' || ch == '(' || ch == ')';
}

bool isNumber(char ch) {
    return isdigit(ch);
}

vector<string> strToInfix(const string &infixExpression) {
    vector<string> tokens;
    string number;
    bool negative = true;
    bool previousIsOperator = true;

    for (size_t i = 0; i < infixExpression.size(); ++i) {
        char ch = infixExpression[i];

        if (isNumber(ch)) {
            number += ch;
            negative = false;
            previousIsOperator  = false;
        } else if (isSymbol(ch)) {
            if (!number.empty()) {
                tokens.push_back(number);
                number.clear();
            }

            if (ch == '-' && (negative || (i > 0 && infixExpression[i - 1] == '('))) {
                if (previousIsOperator  && i + 1 < infixExpression.size() && infixExpression[i + 1] == '(') {
                    tokens.push_back("-1");
                    tokens.push_back("*");
                } else if (previousIsOperator ) {
                    number += ch;
                    previousIsOperator  = false;
                } else {
                    tokens.push_back("-1");
                    tokens.push_back("*");
                }
            } else {
                tokens.push_back(string(1, ch));
            }
            negative = (ch != ')');
            previousIsOperator  = false;
        } else if (ch == ' ') {
            if (!number.empty()) {
                tokens.push_back(number);
                number.clear();
            }
        }
    }
    if (!number.empty()) {
        tokens.push_back(number);
    }
    return tokens;
}

void showTokens(const vector<string> &tokens) {
    for (size_t i = 0; i < tokens.size(); ++i) {
        if (i > 0) {
            cout << " ";
        }
        cout << tokens[i];
    }
    cout << endl;
}

int main() {
    string infixExpression;
    getline(cin, infixExpression);

    vector<string> tokensInfix = strToInfix(infixExpression);
    showTokens(tokensInfix);

    return 0;
}
