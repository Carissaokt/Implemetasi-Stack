#include <iostream>
#include <stack>
#include <string>

using namespace std;

bool isOperator(char ch){
    return ch == '*' || ch == '/' || ch == '+' || ch == '-' || ch == '%';
}

int getPrecedence(char ch){
    if (ch == '*' || ch == '/' || ch == '%') return 2;
    if (ch == '+' || ch == '-') return 1;
    return 0;
}

bool isNumber(char ch){
    return ch >= '0' && ch <= '9';
}

bool isSpace(char ch){
    return ch == ' ';
}

string infixToPostfix(const string& infix){
    string postfix;
    stack<char> operatorStack;
    bool expectUnaryOperator = true;
    
    int length = infix.size();
    for (int i = 0; i < length; ++i){
        if (isSpace(infix[i]))
            continue;
        
        if (isNumber(infix[i])){
            postfix += infix[i];
            while (i + 1 < length && (isNumber(infix[i + 1]) || infix[i+1] == '.')){
                postfix += infix[++i];
            }
            postfix += ' ';
            expectUnaryOperator = false;
        } else if (infix[i] == '('){
            operatorStack.push('(');
            expectUnaryOperator = true;
        } else if (infix[i] == ')') {
            while (!operatorStack.empty() && operatorStack.top() != '('){
                postfix += operatorStack.top();
                postfix += ' ';
                operatorStack.pop();
            }
            operatorStack.pop();
            expectUnaryOperator = false;
        } else if (isOperator(infix[i])){
            if (expectUnaryOperator && infix[i] == '-'){
                postfix += "0 ";
                operatorStack.push('-');
            } else {
                while (!operatorStack.empty() && getPrecedence(operatorStack.top()) >= getPrecedence(infix[i])){
                    postfix += operatorStack.top();
                    postfix += ' ';
                    operatorStack.pop();
                }
                operatorStack.push(infix[i]);
            }
            expectUnaryOperator = true;
        }
    }
    
    while (!operatorStack.empty()){
        postfix += operatorStack.top();
        postfix += ' ';
        operatorStack.pop();
    }
    
    return postfix;
}

int stringToInt(const string& str, size_t& index){
    int result = 0;
    bool isNegative = false;
    
    if (str[index] == '-'){
        isNegative = true;
        ++index;
    }
    
    while (index < str.size() && isNumber(str[index])){
        result = result * 10 + (str[index] - '0');
        ++index;
    }
    
    return isNegative ? -result : result;
}

int evaluatePostfix(const string& postfix){
    stack<int> opr;
    size_t index = 0;
    size_t length = postfix.size();
    
    while (index < length){
        if (isSpace(postfix[index])){
            ++index;
            continue;
        }
        
        if (isNumber(postfix[index]) || (postfix[index] == '-' && isNumber(postfix[index + 1]))){
            opr.push(stringToInt(postfix, index));
        } else {
            int opr2 = opr.top();
            opr.pop();
            int opr1 = opr.top();
            opr.pop();
            
            if (postfix[index] == '+') opr.push(opr1 + opr2);
            else if (postfix[index] == '-') opr.push(opr1 - opr2);
            else if (postfix[index] == '*') opr.push(opr1 * opr2);
            else if (postfix[index] == '/') opr.push(opr1 / opr2);
            else if (postfix[index] == '%') opr.push(opr1 % opr2);
            
            ++index;
        }
    }
    
    return opr.top();
}

int main(){
    string infixExpression;
    getline(cin, infixExpression);
    
    string postfixExpression = infixToPostfix(infixExpression);
    int result = evaluatePostfix(postfixExpression);
    cout << result << endl;
    
    return 0;
}
